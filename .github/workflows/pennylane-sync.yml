name: Synchronisation Pennylane - Google Sheets - Armado

on:
  # Exécution automatique tous les jours à 12h00 heure française (11h00 UTC)
  schedule:
    - cron: '0 11 * * *'
  
  # Exécution manuelle
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Mode test (ne synchronise pas Armado)'
        required: false
        default: false
        type: boolean

jobs:
  sync-pennylane-armado:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configuration des variables d'environnement
      run: |
        # Secrets (données sensibles)
        echo "PENNYLANE_API_KEY=${{ secrets.PENNYLANE_API_KEY }}" >> $GITHUB_ENV
        echo "ARMADO_API_KEY=${{ secrets.ARMADO_API_KEY }}" >> $GITHUB_ENV
        echo "ARMADO_BASE_URL=${{ secrets.ARMADO_BASE_URL || 'https://api.myarmado.fr' }}" >> $GITHUB_ENV
        echo "ARMADO_TIMEOUT=${{ secrets.ARMADO_TIMEOUT || '10' }}" >> $GITHUB_ENV
        echo "GOOGLE_SHEETS_CREDENTIALS_FILE=/tmp/credentials.json" >> $GITHUB_ENV
        echo "GOOGLE_CREDENTIALS=${{ secrets.GOOGLE_CREDENTIALS }}" >> $GITHUB_ENV
        
        # Variables (données non-sensibles)
        echo "GOOGLE_SHEETS_SPREADSHEET_ID=${{ vars.SPREADSHEET_ID }}" >> $GITHUB_ENV
        echo "GOOGLE_SHEETS_SHEET_NAME=${{ vars.SPREADSHEET_NAME || 'Tâches à réaliser' }}" >> $GITHUB_ENV
        
        # Variables de contrôle
        echo "TEST_MODE=${{ github.event.inputs.test_mode || 'false' }}" >> $GITHUB_ENV
    
    - name: Configuration des credentials Google
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > /tmp/credentials.json
        chmod 600 /tmp/credentials.json
    
    - name: Test de connexion Armado
      if: env.TEST_MODE == 'false'
      run: |
        echo "=== Test de connexion Armado ==="
        python test_quick_armado.py
      continue-on-error: true
    
    - name: Exécution de la synchronisation
      run: |
        echo "=== Début de la synchronisation ==="
        echo "Mode test: $TEST_MODE"
        echo "Date: $(date)"
        
        if [ "$TEST_MODE" = "true" ]; then
          echo "Mode test activé - synchronisation Armado désactivée"
          python main.py --auto --test-mode
        else
          echo "Mode production - synchronisation Armado activée"
          python main.py --auto
        fi
    
    - name: Nettoyage des credentials
      if: always()
      run: |
        rm -f /tmp/credentials.json
        echo "Credentials nettoyés"
    
    - name: Rapport de synchronisation
      if: always()
      run: |
        echo "=== Rapport de synchronisation ==="
        echo "Date d'exécution: $(date)"
        echo "Mode test: $TEST_MODE"
        echo "Statut: ${{ job.status }}"
        
        if [ -f "processed_items.json" ]; then
          echo "Fichier processed_items.json présent"
        else
          echo "Aucun élément traité"
        fi

  # Job séparé pour les tests unitaires
  test-armado-integration:
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'true'
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Configuration Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Configuration des variables d'environnement pour les tests
      run: |
        echo "ARMADO_API_KEY=test_key" >> $GITHUB_ENV
        echo "ARMADO_BASE_URL=https://api.test.armado.fr" >> $GITHUB_ENV
        echo "ARMADO_TIMEOUT=5" >> $GITHUB_ENV
    
    - name: Exécution des tests unitaires
      run: |
        echo "=== Tests unitaires Armado ==="
        python -m pytest test_armado_integration.py -v --tb=short
    
    - name: Test de connexion (avec mock)
      run: |
        echo "=== Test de connexion avec mock ==="
        python test_quick_armado.py