#!/usr/bin/env python3
"""
Script de test rapide pour l'int√©gration Armado
Ce script teste la connexion et les fonctions principales sans modifier de donn√©es r√©elles
"""

import os
import sys
from datetime import datetime

def test_imports():
    """Test des imports"""
    print("=== Test des imports ===")
    try:
        from armado_client import ArmadoClient
        from sync_payments import sync_armado_after_tempo, get_available_payment_modes, test_armado_connection
        print("‚úì Tous les imports r√©ussis")
        return True
    except ImportError as e:
        print(f"‚úó Erreur d'import: {e}")
        return False

def test_environment():
    """Test des variables d'environnement"""
    print("\n=== Test des variables d'environnement ===")
    
    required_vars = ['ARMADO_API_KEY']
    optional_vars = ['ARMADO_BASE_URL', 'ARMADO_TIMEOUT']
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚úó Variables manquantes: {missing_vars}")
        print("  Ajoutez-les √† votre fichier .env")
        return False
    
    print("‚úì Variables d'environnement requises pr√©sentes")
    
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            print(f"  {var}: {value}")
        else:
            print(f"  {var}: (valeur par d√©faut)")
    
    return True

def test_client_initialization():
    """Test d'initialisation du client"""
    print("\n=== Test d'initialisation du client ===")
    try:
        from armado_client import ArmadoClient
        client = ArmadoClient()
        print(f"‚úì Client initialis√©")
        print(f"  Base URL: {client.base_url}")
        print(f"  Timeout: {client.timeout}")
        print(f"  Max retries: {client.max_retries}")
        return True
    except Exception as e:
        print(f"‚úó Erreur d'initialisation: {e}")
        return False

def test_payment_modes():
    """Test des modes de paiement"""
    print("\n=== Test des modes de paiement ===")
    try:
        from sync_payments import get_available_payment_modes
        modes = get_available_payment_modes()
        print(f"‚úì {len(modes)} modes de paiement disponibles:")
        for mode in sorted(modes):
            print(f"  - {mode}")
        return True
    except Exception as e:
        print(f"‚úó Erreur: {e}")
        return False

def test_connection():
    """Test de connexion √† l'API Armado"""
    print("\n=== Test de connexion Armado ===")
    try:
        from sync_payments import test_armado_connection
        if test_armado_connection():
            print("‚úì Connexion Armado r√©ussie")
            return True
        else:
            print("‚úó Probl√®me de connexion Armado")
            print("  V√©rifiez votre API key et la connectivit√© r√©seau")
            return False
    except Exception as e:
        print(f"‚úó Erreur de connexion: {e}")
        return False

def test_sync_function():
    """Test de la fonction de synchronisation (avec donn√©es fictives)"""
    print("\n=== Test de la fonction de synchronisation ===")
    try:
        from sync_payments import sync_with_error_handling
        
        # Test avec des donn√©es fictives (va √©chouer mais on peut voir le comportement)
        result = sync_with_error_handling(
            invoice_reference="TEST_12345",
            payment_mode="virement",
            payment_date=datetime.now()
        )
        
        print(f"R√©sultat: success={result['success']}")
        if result['error']:
            print(f"Erreur (attendue): {result['error']}")
        
        # V√©rifier que la structure de r√©ponse est correcte
        required_keys = ['success', 'data', 'error']
        if all(key in result for key in required_keys):
            print("‚úì Structure de r√©ponse correcte")
            return True
        else:
            print("‚úó Structure de r√©ponse incorrecte")
            return False
            
    except Exception as e:
        print(f"‚úó Erreur: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("=== Test rapide de l'int√©gration Armado ===\n")
    
    tests = [
        ("Imports", test_imports),
        ("Variables d'environnement", test_environment),
        ("Initialisation du client", test_client_initialization),
        ("Modes de paiement", test_payment_modes),
        ("Connexion Armado", test_connection),
        ("Fonction de synchronisation", test_sync_function)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "="*50)
    print("=== R√âSUM√â DES TESTS ===")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úì PASS" if result else "‚úó FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! L'int√©gration est pr√™te.")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
