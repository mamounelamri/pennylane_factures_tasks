#!/usr/bin/env python3
"""
Script de configuration automatique pour l'int√©gration Pennylane - Google Sheets
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Cr√©e le fichier .env avec les variables n√©cessaires"""
    
    print("=== Configuration du fichier .env ===\n")
    
    # V√©rifier si le fichier existe d√©j√†
    if os.path.exists('.env'):
        response = input("Le fichier .env existe d√©j√†. Voulez-vous le remplacer ? (o/n): ")
        if response.lower() != 'o':
            print("Configuration annul√©e.")
            return
    
    # Demander les informations
    print("Veuillez fournir les informations suivantes :\n")
    
    pennylane_key = input("Cl√© API Pennylane: ").strip()
    if not pennylane_key:
        print("‚ùå Cl√© API Pennylane requise")
        return
    
    credentials_file = input("Fichier credentials Google (credentials.json): ").strip()
    if not credentials_file:
        credentials_file = "credentials.json"
    
    spreadsheet_name = input("Nom du Google Sheet: ").strip()
    if not spreadsheet_name:
        print("‚ùå Nom du Google Sheet requis")
        return
    
    # Cr√©er le fichier .env
    env_content = f"""# Configuration Pennylane
PENNYLANE_API_KEY={pennylane_key}

# Configuration Google Sheets
GOOGLE_SHEETS_CREDENTIALS_FILE={credentials_file}
SPREADSHEET_NAME={spreadsheet_name}
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ Fichier .env cr√©√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")
        return

def check_dependencies():
    """V√©rifie et installe les d√©pendances"""
    
    print("\n=== V√©rification des d√©pendances ===\n")
    
    try:
        import requests
        import google.auth
        import schedule
        import dotenv
        print("‚úÖ Toutes les d√©pendances sont install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Installation des d√©pendances...")
        
        try:
            os.system(f"{sys.executable} -m pip install -r requirements.txt")
            print("‚úÖ D√©pendances install√©es")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'installation: {e}")
            return False
    
    return True

def check_files():
    """V√©rifie la pr√©sence des fichiers n√©cessaires"""
    
    print("\n=== V√©rification des fichiers ===\n")
    
    # V√©rifier le fichier .env
    if not os.path.exists('.env'):
        print("‚ùå Fichier .env manquant")
        return False
    else:
        print("‚úÖ Fichier .env pr√©sent")
    
    # V√©rifier le fichier credentials
    credentials_file = os.getenv('GOOGLE_SHEETS_CREDENTIALS_FILE', 'credentials.json')
    if not os.path.exists(credentials_file):
        print(f"‚ùå Fichier {credentials_file} manquant")
        print("   T√©l√©chargez le fichier credentials.json depuis Google Cloud Console")
        return False
    else:
        print(f"‚úÖ Fichier {credentials_file} pr√©sent")
    
    return True

def run_tests():
    """Lance les tests de configuration"""
    
    print("\n=== Tests de configuration ===\n")
    
    # Test Pennylane
    print("Test de connexion Pennylane...")
    try:
        from pennylane_client import PennylaneClient
        client = PennylaneClient()
        invoices = client.get_invoices(limit=1)
        if invoices is not None:
            print("‚úÖ Connexion Pennylane r√©ussie")
        else:
            print("‚ö†Ô∏è  Aucune facture trouv√©e (v√©rifiez votre cl√© API)")
    except Exception as e:
        print(f"‚ùå Erreur de connexion Pennylane: {e}")
        return False
    
    # Test Google Sheets
    print("Test de connexion Google Sheets...")
    try:
        from google_sheets_client import GoogleSheetsClient
        sheets_client = GoogleSheetsClient()
        sheets_client.get_spreadsheet_info()
        print("‚úÖ Connexion Google Sheets r√©ussie")
    except Exception as e:
        print(f"‚ùå Erreur de connexion Google Sheets: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    
    print("=== Configuration de l'int√©gration Pennylane - Google Sheets ===\n")
    
    # √âtape 1: Cr√©er le fichier .env
    create_env_file()
    
    # √âtape 2: V√©rifier les d√©pendances
    if not check_dependencies():
        print("\n‚ùå Configuration √©chou√©e - D√©pendances manquantes")
        return
    
    # √âtape 3: V√©rifier les fichiers
    if not check_files():
        print("\n‚ùå Configuration √©chou√©e - Fichiers manquants")
        return
    
    # √âtape 4: Tests
    if not run_tests():
        print("\n‚ùå Configuration √©chou√©e - Tests √©chou√©s")
        return
    
    print("\nüéâ Configuration termin√©e avec succ√®s !")
    print("\nVous pouvez maintenant utiliser l'int√©gration :")
    print("  python main.py          # Lancer l'int√©gration")
    print("  python test_pennylane.py # Tester les endpoints Pennylane")

if __name__ == "__main__":
    main() 