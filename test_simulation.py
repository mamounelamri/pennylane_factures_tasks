#!/usr/bin/env python3
"""
Script de simulation pour tester la cr√©ation de t√¢ches Google Sheets
"""

import os
import json
from datetime import datetime, timedelta
from typing import List, Dict
from dotenv import load_dotenv

from google_sheets_client import GoogleSheetsClient

load_dotenv()

def create_simulation_data() -> List[Dict]:
    """Cr√©e des donn√©es de simulation pour tester"""
    
    # Donn√©es de simulation
    simulation_invoices = [
        {
            'id': 'sim_001',
            'invoice_number': 'FACT-2025-001',
            'date': '2025-01-15',
            'currency_amount': '1250.00',
            'paid': True,
            'status': 'paid',
            'updated_at': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
            'customer': {
                'id': '12345',
                'name': 'Entreprise Test 1'
            }
        },
        {
            'id': 'sim_002', 
            'invoice_number': 'FACT-2025-002',
            'date': '2025-01-20',
            'currency_amount': '850.50',
            'paid': True,
            'status': 'paid',
            'updated_at': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
            'customer': {
                'id': '67890',
                'name': 'Entreprise Test 2'
            }
        },
        {
            'id': 'sim_003',
            'invoice_number': 'FACT-2025-003', 
            'date': '2025-01-25',
            'currency_amount': '2100.75',
            'paid': False,
            'status': 'partially_cancelled',
            'updated_at': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
            'customer': {
                'id': '11111',
                'name': 'Entreprise Test 3'
            }
        },
        {
            'id': 'sim_004',
            'invoice_number': 'FACT-2025-004',
            'date': '2025-01-30', 
            'currency_amount': '750.25',
            'paid': True,
            'status': 'paid',
            'updated_at': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
            'customer': {
                'id': '22222',
                'name': 'Entreprise Test 4'
            }
        },
        {
            'id': 'sim_005',
            'invoice_number': 'FACT-2025-005',
            'date': '2025-02-01',
            'currency_amount': '3200.00', 
            'paid': False,
            'status': 'partially_cancelled',
            'updated_at': datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'),
            'customer': {
                'id': '33333',
                'name': 'Entreprise Test 5'
            }
        }
    ]
    
    return simulation_invoices

def format_date(date_str: str) -> str:
    """Formate une date pour l'affichage"""
    if not date_str:
        return ""
    try:
        date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return date_obj.strftime('%d/%m/%Y')
    except:
        return date_str

def format_amount(amount: str) -> str:
    """Formate un montant pour l'affichage"""
    if not amount:
        return ""
    try:
        amount_float = float(amount)
        return f"{amount_float:.2f} ‚Ç¨"
    except:
        return amount

def create_task_from_simulation_invoice(invoice_data: Dict) -> Dict:
    """Cr√©e une t√¢che √† partir des donn√©es de simulation"""
    
    customer_data = invoice_data.get('customer', {})
    
    task_data = {
        'invoice_number': invoice_data.get('invoice_number', ''),
        'invoice_date': format_date(invoice_data.get('date')),
        'payment_amount': format_amount(invoice_data.get('currency_amount')),
        'client_name': customer_data.get('name', f"Client {customer_data.get('id', '')}"),
        'status': 'Pay√©e' if invoice_data.get('paid') else 'Partiellement pay√©e'
    }
    
    return task_data

def run_simulation():
    """Ex√©cute la simulation compl√®te"""
    
    print("=== SIMULATION - Test de cr√©ation de t√¢ches Google Sheets ===\n")
    
    try:
        # Initialiser le client Google Sheets
        print("1. Initialisation du client Google Sheets...")
        sheets_client = GoogleSheetsClient()
        sheets_client.setup_spreadsheet()
        print("‚úì Client Google Sheets initialis√©\n")
        
        # Cr√©er les donn√©es de simulation
        print("2. Cr√©ation des donn√©es de simulation...")
        simulation_invoices = create_simulation_data()
        print(f"‚úì {len(simulation_invoices)} factures de simulation cr√©√©es\n")
        
        # Afficher les donn√©es de simulation
        print("3. Donn√©es de simulation:")
        for i, invoice in enumerate(simulation_invoices, 1):
            print(f"   {i}. {invoice['invoice_number']} - {invoice['currency_amount']}‚Ç¨ - {invoice['status']}")
        print()
        
        # Traiter chaque facture de simulation
        print("4. Cr√©ation des t√¢ches dans Google Sheets...")
        processed_count = 0
        
        for invoice in simulation_invoices:
            # Cr√©er la t√¢che
            task_data = create_task_from_simulation_invoice(invoice)
            
            # Ajouter au Google Sheet
            if sheets_client.create_task(task_data):
                processed_count += 1
                print(f"  ‚úì T√¢che cr√©√©e pour {task_data['invoice_number']} ({task_data['payment_amount']})")
            else:
                print(f"  ‚úó Erreur lors de la cr√©ation de la t√¢che pour {invoice['invoice_number']}")
        
        print(f"\n‚úì Simulation termin√©e: {processed_count} t√¢ches cr√©√©es avec succ√®s")
        
        # Afficher l'URL du spreadsheet
        if sheets_client.spreadsheet_id:
            print(f"\nüìä Google Sheet: https://docs.google.com/spreadsheets/d/{sheets_client.spreadsheet_id}")
            print("   Vous pouvez v√©rifier les t√¢ches cr√©√©es dans le fichier.")
        
    except Exception as e:
        print(f"‚úó Erreur lors de la simulation: {e}")
        print("V√©rifiez votre configuration dans le fichier .env")

def test_single_task():
    """Test d'une seule t√¢che"""
    
    print("=== TEST - Cr√©ation d'une seule t√¢che ===\n")
    
    try:
        # Initialiser le client
        sheets_client = GoogleSheetsClient()
        sheets_client.setup_spreadsheet()
        
        # Cr√©er une t√¢che de test
        test_task = {
            'invoice_number': 'TEST-001',
            'invoice_date': '15/01/2025',
            'payment_amount': '1000.00 ‚Ç¨',
            'status': 'Pay√©e'
        }
        
        print("Cr√©ation d'une t√¢che de test...")
        if sheets_client.create_task(test_task):
            print("‚úì T√¢che de test cr√©√©e avec succ√®s")
            if sheets_client.spreadsheet_id:
                print(f"üìä V√©rifiez dans: https://docs.google.com/spreadsheets/d/{sheets_client.spreadsheet_id}")
        else:
            print("‚úó Erreur lors de la cr√©ation de la t√¢che de test")
            
    except Exception as e:
        print(f"‚úó Erreur: {e}")

if __name__ == "__main__":
    print("Choisissez le mode de test:")
    print("1. Simulation compl√®te (5 t√¢ches)")
    print("2. Test d'une seule t√¢che")
    
    choice = input("\nVotre choix (1 ou 2): ").strip()
    
    if choice == "1":
        run_simulation()
    elif choice == "2":
        test_single_task()
    else:
        print("Choix invalide. Ex√©cution de la simulation compl√®te...")
        run_simulation() 